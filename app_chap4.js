//Deploy Contract with web3.js
var Tx = require('ethereumjs-tx')
var Web3 = require('web3')

var web3 = Web3('https://ropsten.infura.io/v3/a55fba2fccc0495b97c84c0fed5889b0')

var account1 = '0x06CEAc90b1B1ff32b5e709E29F31443daB03aA8C'

const privateKey1= Buffer.from(process.env.PRIVATE_KEY1,'hex');//convert private key to string of binary data

//Create TXn Object
web3.eth.getTransactionCount(account1).then(_nonce => {
    //Smart Contract Data
    const data = '' //feed bytecode in hex

    //Build the transaction
    const txObject = {
        nonce:'0x'+_nonce.toString(16),
        gasPrice:100000,
        gasLimit:1000000,//Raise this 
        data:data // bytecode of SC no "to" as we are broadcastinng the txn to entire network with data// data is the code of SC
    }

    //Sign The Txn
    const tx = new Tx(txObject);
    tx.sign(privateKey1)//sign raw Txn

    //Broadcast the Txn

    var call = async function (){
        try {
        // Broadcast the transaction
        await web3.eth.sendSignedTransaction(raw,(err,txHash)=>{//send signed raw TXn
        console.log("txHash",txHash);
        })}catch(err) {
        console.log(err)
        }
    }//expectes a signed transaction
    call();
    web3.eth.getBalance(account1,(err,bal)=>{
        console.log("Account1 balance",web3.utils.fromWei(bal,'ether'))
    })
})
   

